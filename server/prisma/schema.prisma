generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String
  email         String    @unique
  passwordHash String
  createdAt     DateTime  @default(now())
  contracts     Contract[]
  questions     Question[]
  toolsExecuted ToolExecution[]
  conversations Conversation[]
}

model Contract {
  id              Int               @id @default(autoincrement())
  user            User             @relation(fields: [userId], references: [id])
  userId          Int
  title           String
  originalFilename String
  uploadPath      String
  content         String
  createdAt       DateTime          @default(now())
  sections        ContractSection[]
  questions       Question[]
  checklistItems  ChecklistItem[]
  loopholes       Loophole[]
  toolsExecuted   ToolExecution[]
  conversations   Conversation[]
}

model ContractSection {
  id         Int      @id @default(autoincrement())
  contract   Contract @relation(fields: [contractId], references: [id])
  contractId Int
  heading    String
  content    String
  chunkIndex Int
}

model Question {
  id         Int       @id @default(autoincrement())
  contract   Contract  @relation(fields: [contractId], references: [id])
  contractId Int
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  question   String
  answer     String
  createdAt  DateTime  @default(now())
  sources    Source[]
}

model ChecklistItem {
  id         Int       @id @default(autoincrement())
  contract   Contract  @relation(fields: [contractId], references: [id])
  contractId Int
  item       String
  status     Status    @default(PENDING)
  addedBy    Role      @default(TOOL)
  createdAt  DateTime  @default(now())
}

enum Status {
  PENDING
  COMPLETED
  FLAGGED
}

enum Role {
  USER
  TOOL
}

model Loophole {
  id         Int       @id @default(autoincrement())
  contract   Contract  @relation(fields: [contractId], references: [id])
  contractId Int
  description String
  severity   Severity
  flaggedBy  Role
  createdAt  DateTime  @default(now())
}

enum Severity {
  LOW
  MEDIUM
  HIGH
}

model ToolExecution {
  id         Int       @id @default(autoincrement())
  contract   Contract  @relation(fields: [contractId], references: [id])
  contractId Int
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  toolName   String
  input      String
  output     String
  success    Boolean
  executedAt DateTime  @default(now())
}

model Source {
  id         Int       @id @default(autoincrement())
  question   Question  @relation(fields: [questionId], references: [id])
  questionId Int
  sourceType SourceType
  title      String
  url        String?
  summary    String
}

enum SourceType {
  CASE_LAW
  STATUTE
  ARTICLE
  OTHER
}

model Conversation {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  contract    Contract? @relation(fields: [contractId], references: [id])
  contractId  Int?
  title       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  messages    Message[]
}

model Message {
  id              Int          @id @default(autoincrement())
  conversation    Conversation @relation(fields: [conversationId], references: [id])
  conversationId  Int
  sender          Role         // USER or TOOL
  content         String
  toolUsed        String?
  createdAt       DateTime     @default(now())
}
